简要概述：
本文介绍了平台工程作为DevOps和云计算领域中的新角色，引发了关于它是否取代DevOps或是对其进行补充的讨论。平台工程改变了游戏规则，引入了挑战DevOps、SRE和云计算工程中已有规则的新规则。平台工程的需求源于传统的工作方式，即开发人员和运营人员在不同的团队中工作，导致了一个不灵活和缓慢的过程。

亮点：
- 🚀 平台工程是DevOps和云计算领域中的新角色，旨在解决DevOps中存在的问题。
- 🤝 平台工程与DevOps不是相互取代，而是相互补充的关系。
- 🛠️ 平台工程标准化了应用程序的非功能需求，使DevOps团队更加高效和灵活。
- 🔒 平台工程需要提供安全、可靠和可扩展的平台，以确保应用程序的部署和运行。
- 🤖 平台工程需要使用自动化工具来减少错误和提高效率。
- 🧑‍💻 平台工程需要具备基础设施、网络和安全方面的强大理解，以及编程语言、自动化工具和云平台方面的知识。

在DevOps和云计算领域中，平台工程的重要性不言而喻。它为应用程序的开发和部署提供了稳定和可扩展的基础设施，并强调了自动化在平台工程中的重要性。对于那些有兴趣从事平台工程或DevOps的人来说，本文提供了有价值的信息，建议他们专注于发展这些技能并在这些领域获得经验。总之，平台工程是DevOps和云计算领域中的新角色，旨在解决DevOps中存在的问题，但需要正确实施才能发挥作用。

### Detailed Summary
The emergence of platform engineering as a new role in the DevOps and Cloud space has sparked discussions about whether it replaces DevOps or is an addition to it. Platform engineering changes the game and introduces new rules that challenge established rules in DevOps, SRE, and Cloud engineering. The need for platform engineering arose from the traditional way of working where developers and operations worked in separate teams, leading to an inflexible and slow process. 

DevOps was introduced to unite these teams, removing communication challenges and knowledge silos between them. However, with DevOps, one team is responsible for developing the application and running the entire stack under the application, leading to a lot of responsibility and cognitive load. Platform engineering solves the problem of too much responsibility on one team with high cognitive load and organization-wide inconsistency. Platform engineers take the tools needed for deploying and running the application and standardize their usage across teams. They standardize everything that is part of the application's non-functional requirements, which are things that are not business logic but necessary to deliver the application to its end-users. 

Platform engineering only works if implemented correctly. The platform team needs to define the boundaries of their responsibilities and communicate them clearly to the product teams. The platform team needs to provide a self-service platform that allows the product teams to deploy and run their applications without needing to know the underlying infrastructure. The platform team needs to provide documentation and training to the product teams on how to use the platform. The platform team needs to ensure that the platform is secure, reliable, and scalable. 

Platform engineering is not a replacement for DevOps but rather an addition to it. Platform engineering standardizes the usage of tools that offer non-functional requirements for the platform, while DevOps focuses on the development and deployment of the application. Platform engineering enables DevOps teams to be more efficient and flexible by providing a self-service platform that allows them to deploy and run their applications without needing to know the underlying infrastructure. Platform engineering also enables organizations to scale by providing a standard platform that can be used by multiple product teams. 

Platform engineering involves separating the responsibilities of tool administration and tool usage. The platform engineering team is responsible for setting up and configuring tools, ensuring backups and security, installing plugins, and making the tools ready for use. The application teams, on the other hand, use the tools for their intended purpose. Platform engineering standardizes the tools across teams, selects the standard tools, sets them up with production and security best practices, and offers a ready solution for the application teams. 

Platform engineering involves building an internal developer platform (IDP) that abstracts the complexity of operating and managing the services that developers need to release and run their applications. The platform team configures the services properly, applies their expertise, and creates an abstraction layer on top with a user-friendly interface like a UI or API. This allows application teams to self-service whatever services and tools they need without going to the platform team to ask for resources. The platform team adds guardrails and pre-configurations to ensure security consistency and proper configuration. 

Implementing an internal developer platform requires a careful approach that starts with small steps and treats the IDP as a product that needs continuous development and improvement. Collaboration between the platform team and application teams is crucial, and clear responsibilities should be established. While application teams still need DevOps engineers, the scope of their work has become less as the platform team takes over the operations part. The platform team also needs to continuously develop the platform with feedback iterations and close input gathering from end-users, which requires DevOps processes. 

The article emphasizes the significance of platform engineering in the DevOps and Cloud world. It provides a comprehensive overview of platform engineering and its role in these fields. The article notes that platform engineering is responsible for creating a stable and scalable infrastructure that supports application development and deployment. It also highlights the importance of automation in platform engineering, which helps to reduce errors and increase efficiency. 

The article also provides valuable information for those interested in pursuing a career in platform engineering or DevOps. It notes that platform engineering requires a strong understanding of infrastructure, networking, and security. It also requires knowledge of programming languages, automation tools, and cloud platforms. The article suggests that individuals interested in pursuing a career in platform engineering should focus on developing these skills and gaining experience in these areas. 

In conclusion, platform engineering is a new role in the DevOps and Cloud space that standardizes the usage of tools that offer non-functional requirements for the platform. Platform engineering solves the problem of too much responsibility on one team with high cognitive load and organization-wide inconsistency. Platform engineering only works if implemented correctly by defining the boundaries of responsibilities, providing a self-service platform, providing documentation and training, and ensuring that the platform is secure, reliable, and scalable. Platform engineering is not a replacement for DevOps but rather an addition to it that enables DevOps teams to be more efficient and flexible and enables organizations to scale. The article discusses the importance of having a full understanding of both DevOps and platform engineering for success in these roles.